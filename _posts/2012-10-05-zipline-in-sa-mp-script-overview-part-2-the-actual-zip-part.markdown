---
layout:     post
title:      "Zipline in SA&#58;MP Script Overview (Part 2&#58; The Actual &#34;Zip&#34; Part)"
date:       2012-10-05 16:15:01
categories: samp
---
In the first post I talked about my library for generating line segments with objects, here I'll talk about how I implemented that library to make the ziplines usable! So, that's all done, I can draw lines, I just spent an entire morning writing code that draws lines. But not just any lines, 3D lines! It felt like an accomplishment as well, I'm not the greatest mathematician and it usually takes me a long while to get my head around certain formulas, calculations or general theories! But once I can easily understand something and put it to a use where I can see how it works, guaranteed I will understand it. [![](http://fc00.deviantart.net/fs36/f/2008/258/3/4/zip_line_by_Zip_Line.jpg)](http://zip-line.deviantart.com/) (Just a random image via searching Zipline! Credits to ~Zip-Line over at DeviantArt)  The zipline code became stupidly easy after that, most of the complex math was out of the way and I could begin working on gameplay features rather than behind the scenes stuff (Which I greatly enjoy, but can never really be truly appreciated by players as they are just there to enjoy themselves with gameplay features, not fuss about what goes on in the background!) Firstly, on the zipline creation functions, the line is created, an area is created (Using Incognito's amazing dynamic streamer plugin) in order to act as an activation zone for the player, if the player presses the action key while in this sphere, he will enter the zipline. There is also an area created at the end so the player will exit the zipline when he reaches the end. Also the vector of the line is saved to the zipline's data, this way the vector doesn't have to be calculated on every player movement frame, it just reads the value from memory as it's never going to change (if it does, that sounds like a freaking weird (but fun) zipline) ![](http://i.imgur.com/28F7c.png) _This image represents the theoretical line from the vector and the entry/exit areas._ I can now access the zipline, an animation is played (the "hanging" animation when you jump to a high ledge, this looked like it works fine for the zipline) I fly down to the destination point where I an ejected from the line and land on a roof. It all works great, but there are still features to implement, for one I want the player to be able to access the zipline anywhere along it not just at the start. Now I could create a sphere zone at every 2 or 3 units along the line, but that's a waste, I have a far better way to do it! Using a "distance from line to point" formula I simply use the line position, vector and player position in this function to calculate the distance from the player to the closest point on the line (The point that is in line with the player, if the line and the player were on a separate plane that was level with the line's angle) It's hard to explain, because I don't quite understand this, I got the function from somewhere, it was buried in some of my old function libraries and I have no idea who originally made it. The function: 
    
    
    GetDistancePointLine(Float:line_x,Float:line_y,Float:line_z,Float:vector_x,Float:vector_y,Float:vector_z,Float:point_x,Float:point_y,Float:point_z)
    {
        return floatsqroot(floatpower((vector_y) * ((point_z) - (line_z)) - (vector_z) * ((point_y) - (line_y)), 2.0) +floatpower((vector_z) * ((point_x) - (line_x)) - (vector_x) * ((point_z) - (line_z)), 2.0) +floatpower((vector_x) * ((point_y) - (line_y)) - (vector_y) * ((point_x) - (line_x)), 2.0)) / floatsqroot((vector_x) * (vector_x) + (vector_y) * (vector_y) + (vector_z) * (vector_z));
    }
    

![](http://i.imgur.com/fhxHx.png) _This image shows the theoretical "tube" shape of the detection area thanks to that function._
    
    
    That vector of the zipline I mentioned earlier can now be used on the player movement frame update to set the player's velocity vector in the direction of the end of the zipline. And if you drop off the zipline and time it right, you can land on another zipline below and carry on going (Like in the video at the top) because of that above function!

So there we go, one day of work for a satisfying and very fun addition! I hope you liked this, if you want any further explanations of how I did this, don't hesitate to email me or comment here! The code is all available on my GitHub page. [![](http://www.csscube.info/wp-content/uploads/2013/03/github-logo.png)](https://github.com/Southclaw) Click above to go to my GitHub repository! This particular script can be located in: "/ScavengeSurvive/scripts/API/Zipline" and "/ScavengeSurvive/scripts/API/Line"
